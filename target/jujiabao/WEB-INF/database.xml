<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">
     
     <!-- 
     <context:property-placeholder location="classpath:jdbc.properties"/>
      -->
    
    <bean id="jujiabaoDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
 	    <property name="url" value="${jdbc.url}"/>
	    <property name="username" value="${jdbc.username}" />
	    <property name="password" value="${jdbc.password}" />
	     
	    <property name="filters" value="stat" />
	 
	    <property name="maxActive" value="${jdbc.maxActive}" />
	    <property name="initialSize" value="${jdbc.initialSize}" />
	    <property name="maxWait" value="60000" />
	    <property name="minIdle" value="1" />
	 
	    <property name="timeBetweenEvictionRunsMillis" value="3000" />
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	 
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	     
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}" />
	</bean>
	
	<!-- 
		多数据源，多事务管理器支持
	      1、配置事务注解驱动、每个数据源对应的事务管理器，并定义“限定符” 
	      2、在需要事务的地方，指定“限定符” 如：@Transactional("phoenix") 
	      3、如果没有指定限定符，则使用<tx:annotation-driven>默认的事务管理器
	  -->
	<bean id="jujiabaoTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="jujiabaoDataSource" />
		<!-- 指定“限定符” -->
		<qualifier value="jujiabao" />
	</bean>
	
	<!-- 
		 开启注解式事务支持，默认为JDK动态代理。
		基于JDK动态代理 ，可以将@Transactional放置在接口和具体类上。
		基于CGLIB类代理，只能将@Transactional放置在具体类上。 
		因此 在实际开发时全部将@Transactional放到具体类上，而不是接口上。
	 -->
	<tx:annotation-driven transaction-manager="jujiabaoTransactionManager" />
	
	<bean id="jujiabaoSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="jujiabaoDataSource" />
		<property name="typeAliasesPackage" value="com.dunbian.jujiabao.db" />
	</bean>

	<bean name="jujiabaoMapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.dunbian.jujiabao.db" />
		<!-- 
		<property name="sqlSessionFactory" ref="phoenixSqlSessionFactory" />
		-->
		<property name="sqlSessionFactoryBeanName" value="jujiabaoSqlSessionFactory" /> 
	</bean>
	
</beans>